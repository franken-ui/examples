---
import Master from "layouts/master.astro";
import TaskStatus from "components/task-status.astro";
import TaskPriority from "components/task-priority.astro";

const data = [
  {
    selected: true,
    id: "TASK-8782",
    title:
      "You can't compress the program without quantifying the open-source SSD pixel!",
    status: "progress",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-7878",
    title:
      "Try to calculate the EXE feed, maybe it will index the multi-byte pixel!",
    status: "backlog",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-7839",
    title: "We need to bypass the neural TCP card!",
    status: "todo",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-5562",
    title:
      "The SAS interface is down, bypass the open-source pixel so we can back up the PNG bandwidth!",
    status: "backlog",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-8686",
    title:
      "I'll parse the wireless SSL protocol, that should driver the API panel!",
    status: "cancelled",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-1280",
    title:
      "Use the digital TLS panel, then you can transmit the haptic system!",
    status: "done",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-7262",
    title:
      "The UTF8 application is down, parse the neural bandwidth so we can back up the PNG firewall!",
    status: "done",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1138",
    title:
      "Generating the driver won't do anything, we need to quantify the 1080p SMTP bandwidth!",
    status: "progress",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-7184",
    title: "We need to program the back-end THX pixel!",
    status: "todo",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-5160",
    title:
      "Calculating the bus won't do anything, we need to navigate the back-end JSON protocol!",
    status: "progress",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-5618",
    title:
      "Generating the driver won't do anything, we need to index the online SSL application!",
    status: "done",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-6699",
    title:
      "I'll transmit the wireless JBOD capacitor, that should hard drive the SSD feed!",
    status: "backlog",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-2858",
    title: "We need to override the online UDP bus!",
    status: "backlog",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-9864",
    title:
      "I'll reboot the 1080p FTP panel, that should matrix the HEX hard drive!",
    status: "done",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-8404",
    title: "We need to generate the virtual HEX alarm!",
    status: "progress",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-5365",
    title:
      "Backing up the pixel won't do anything, we need to transmit the primary IB array!",
    status: "progress",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-1780",
    title:
      "The CSS feed is down, index the bluetooth transmitter so we can compress the CLI protocol!",
    status: "todo",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-6938",
    title:
      "Use the redundant SCSI application, then you can hack the optical alarm!",
    status: "todo",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-9885",
    title: "We need to compress the auxiliary VGA driver!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-3216",
    title:
      "Transmitting the transmitter won't do anything, we need to compress the virtual HDD sensor!",
    status: "backlog",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-9285",
    title:
      "The IP monitor is down, copy the haptic alarm so we can generate the HTTP transmitter!",
    status: "todo",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1024",
    title:
      "Overriding the microchip won't do anything, we need to transmit the digital OCR transmitter!",
    status: "progress",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-7068",
    title:
      "You can't generate the capacitor without indexing the wireless HEX pixel!",
    status: "cancelled",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-6502",
    title:
      "Navigating the microchip won't do anything, we need to bypass the back-end SQL bus!",
    status: "todo",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-5326",
    title: "We need to hack the redundant UTF8 transmitter!",
    status: "todo",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-6274",
    title:
      "Use the virtual PCI circuit, then you can parse the bluetooth alarm!",
    status: "cancelled",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-1571",
    title:
      "I'll input the neural DRAM circuit, that should protocol the SMTP interface!",
    status: "progress",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-9518",
    title:
      "Compressing the interface won't do anything, we need to compress the online SDD matrix!",
    status: "cancelled",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-5581",
    title:
      "I'll synthesize the digital COM pixel, that should transmitter the UTF8 protocol!",
    status: "backlog",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-2197",
    title:
      "Parsing the feed won't do anything, we need to copy the bluetooth DRAM bus!",
    status: "todo",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-8484",
    title: "We need to parse the solid state UDP firewall!",
    status: "progress",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-9892",
    title:
      "If we back up the application, we can get to the UDP application through the multi-byte THX capacitor!",
    status: "done",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-9616",
    title: "We need to synthesize the cross-platform ASCII pixel!",
    status: "progress",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-9744",
    title:
      "Use the back-end IP card, then you can input the solid state hard drive!",
    status: "done",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-1376",
    title:
      "Generating the alarm won't do anything, we need to generate the mobile IP capacitor!",
    status: "backlog",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-7382",
    title:
      "If we back up the firewall, we can get to the RAM alarm through the primary UTF8 pixel!",
    status: "todo",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-2290",
    title:
      "I'll compress the virtual JSON panel, that should application the UTF8 bus!",
    status: "cancelled",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1533",
    title:
      "You can't input the firewall without overriding the wireless TCP firewall!",
    status: "done",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-4920",
    title:
      "Bypassing the hard drive won't do anything, we need to input the bluetooth JSON program!",
    status: "progress",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-5168",
    title:
      "If we synthesize the bus, we can get to the IP panel through the virtual TLS array!",
    status: "progress",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-7103",
    title: "We need to parse the multi-byte EXE bandwidth!",
    status: "cancelled",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-4314",
    title:
      "If we compress the program, we can get to the XML alarm through the multi-byte COM matrix!",
    status: "progress",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-3415",
    title:
      "Use the cross-platform XML application, then you can quantify the solid state feed!",
    status: "todo",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-8339",
    title:
      "Try to calculate the DNS interface, maybe it will input the bluetooth capacitor!",
    status: "progress",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-6995",
    title:
      "Try to hack the XSS bandwidth, maybe it will override the bluetooth matrix!",
    status: "todo",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-8053",
    title:
      "If we connect the program, we can get to the UTF8 matrix through the digital UDP protocol!",
    status: "todo",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-4336",
    title:
      "If we synthesize the microchip, we can get to the SAS sensor through the optical UDP program!",
    status: "todo",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-8790",
    title:
      "I'll back up the optical COM alarm, that should alarm the RSS capacitor!",
    status: "done",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-8980",
    title:
      "Try to navigate the SQL transmitter, maybe it will back up the virtual firewall!",
    status: "cancelled",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-7342",
    title: "Use the neural CLI card, then you can parse the online port!",
    status: "backlog",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-5608",
    title:
      "I'll hack the haptic SSL program, that should bus the UDP transmitter!",
    status: "cancelled",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-1606",
    title:
      "I'll generate the bluetooth PNG firewall, that should pixel the SSL driver!",
    status: "done",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-7872",
    title:
      "Transmitting the circuit won't do anything, we need to reboot the 1080p RSS monitor!",
    status: "cancelled",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-4167",
    title:
      "Use the cross-platform SMS circuit, then you can synthesize the optical feed!",
    status: "cancelled",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-9581",
    title:
      "You can't index the port without hacking the cross-platform XSS monitor!",
    status: "backlog",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-8806",
    title: "We need to bypass the back-end SSL panel!",
    status: "done",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-6542",
    title:
      "Try to quantify the RSS firewall, maybe it will quantify the open-source system!",
    status: "done",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-6806",
    title:
      "The VGA protocol is down, reboot the back-end matrix so we can parse the CSS panel!",
    status: "cancelled",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-9549",
    title: "You can't bypass the bus without connecting the neural JBOD bus!",
    status: "todo",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1075",
    title:
      "Backing up the driver won't do anything, we need to parse the redundant RAM pixel!",
    status: "done",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-1427",
    title:
      "Use the auxiliary PCI circuit, then you can calculate the cross-platform interface!",
    status: "done",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1907",
    title:
      "Hacking the circuit won't do anything, we need to back up the online DRAM system!",
    status: "todo",
    label: "documentation",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-4309",
    title:
      "If we generate the system, we can get to the TCP sensor through the optical GB pixel!",
    status: "backlog",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3973",
    title:
      "I'll parse the back-end ADP array, that should bandwidth the RSS bandwidth!",
    status: "todo",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-7962",
    title:
      "Use the wireless RAM program, then you can hack the cross-platform feed!",
    status: "cancelled",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-3360",
    title:
      "You can't quantify the program without synthesizing the neural OCR interface!",
    status: "done",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-9887",
    title:
      "Use the auxiliary ASCII sensor, then you can connect the solid state port!",
    status: "backlog",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3649",
    title:
      "I'll input the virtual USB system, that should circuit the DNS monitor!",
    status: "progress",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3586",
    title:
      "If we quantify the circuit, we can get to the CLI feed through the mobile SMS hard drive!",
    status: "progress",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-5150",
    title:
      "I'll hack the wireless XSS port, that should transmitter the IP interface!",
    status: "cancelled",
    label: "feature",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3652",
    title:
      "The SQL interface is down, override the optical bus so we can program the ASCII interface!",
    status: "backlog",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-6884",
    title:
      "Use the digital PCI circuit, then you can synthesize the multi-byte microchip!",
    status: "cancelled",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1591",
    title: "We need to connect the mobile XSS driver!",
    status: "progress",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-3802",
    title:
      "Try to override the ASCII protocol, maybe it will parse the virtual matrix!",
    status: "progress",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-7253",
    title:
      "Programming the capacitor won't do anything, we need to bypass the neural IB hard drive!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-9739",
    title: "We need to hack the multi-byte HDD bus!",
    status: "done",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-4424",
    title:
      "Try to hack the HEX alarm, maybe it will connect the optical pixel!",
    status: "progress",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3922",
    title:
      "You can't back up the capacitor without generating the wireless PCI program!",
    status: "backlog",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-4921",
    title:
      "I'll index the open-source IP feed, that should system the GB application!",
    status: "cancelled",
    label: "bug",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-5814",
    title: "We need to calculate the 1080p AGP feed!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-2645",
    title:
      "Synthesizing the system won't do anything, we need to navigate the multi-byte HDD firewall!",
    status: "todo",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-4535",
    title:
      "Try to copy the JSON circuit, maybe it will connect the wireless feed!",
    status: "progress",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-4463",
    title: "We need to copy the solid state AGP monitor!",
    status: "done",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-9745",
    title:
      "If we connect the protocol, we can get to the GB system through the bluetooth PCI microchip!",
    status: "cancelled",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-2080",
    title:
      "If we input the bus, we can get to the RAM matrix through the auxiliary RAM card!",
    status: "todo",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3838",
    title:
      "I'll bypass the online TCP application, that should panel the AGP system!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-1340",
    title: "We need to navigate the virtual PNG circuit!",
    status: "todo",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-6665",
    title:
      "If we parse the monitor, we can get to the SSD hard drive through the cross-platform AGP alarm!",
    status: "cancelled",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-7585",
    title:
      "If we calculate the hard drive, we can get to the SSL program through the multi-byte CSS microchip!",
    status: "backlog",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-6319",
    title: "We need to copy the multi-byte SCSI program!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-4369",
    title: "Try to input the SCSI bus, maybe it will generate the 1080p pixel!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-9035",
    title: "We need to override the solid state PNG array!",
    status: "cancelled",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-3970",
    title:
      "You can't index the transmitter without quantifying the haptic ASCII card!",
    status: "todo",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-4473",
    title:
      "You can't bypass the protocol without overriding the neural RSS program!",
    status: "todo",
    label: "documentation",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-4136",
    title:
      "You can't hack the hard drive without hacking the primary JSON program!",
    status: "cancelled",
    label: "bug",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-3939",
    title:
      "Use the back-end SQL firewall, then you can connect the neural hard drive!",
    status: "done",
    label: "feature",
    priority: "low",
  },
  {
    selected: false,
    id: "TASK-2007",
    title:
      "I'll input the back-end USB protocol, that should bandwidth the PCI system!",
    status: "backlog",
    label: "bug",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-7516",
    title:
      "Use the primary SQL program, then you can generate the auxiliary transmitter!",
    status: "done",
    label: "documentation",
    priority: "medium",
  },
  {
    selected: false,
    id: "TASK-6906",
    title:
      "Try to back up the DRAM system, maybe it will reboot the online transmitter!",
    status: "done",
    label: "feature",
    priority: "high",
  },
  {
    selected: false,
    id: "TASK-5207",
    title:
      "The SMS interface is down, copy the bluetooth bus so we can quantify the VGA card!",
    status: "progress",
    label: "bug",
    priority: "low",
  },
];
---

<Master>
  <div class="p-8">
    <div class="flex items-center justify-between space-y-2">
      <div class="flex-1">
        <h2 class="text-2xl font-bold tracking-tight">Welcome back!</h2>
        <p class="text-muted-foreground">
          Here's a list of your tasks for this month!
        </p>
      </div>

      <div class="flex-none">
        <a
          class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-accent ring-ring focus:outline-none focus-visible:ring-1"
          href="#"
        >
          <span
            class="relative flex h-8 w-8 shrink-0 overflow-hidden rounded-full"
          >
            <img
              class="aspect-square h-full w-full"
              alt="@shadcn"
              src="https://api.dicebear.com/8.x/lorelei/svg?seed=sveltecult"
            />
          </span>
        </a>
        <div
          class="uk-drop uk-dropdown"
          uk-dropdown="mode: click; pos: bottom-right"
        >
          <ul class="uk-dropdown-nav uk-nav">
            <li class="px-2 py-1.5 text-sm">
              <div class="flex flex-col space-y-1">
                <p class="text-sm font-medium leading-none">sveltecult</p>
                <p class="text-xs leading-none text-muted-foreground">
                  leader@sveltecult.com
                </p>
              </div>
            </li>
            <li class="uk-nav-divider"></li>
            <li>
              <a class="uk-drop-close justify-between" href="#demo" uk-toggle>
                Profile
                <span class="ml-auto text-xs tracking-widest opacity-60">
                  ⇧⌘P
                </span>
              </a>
            </li>
            <li>
              <a class="uk-drop-close justify-between" href="#demo" uk-toggle>
                Billing
                <span class="ml-auto text-xs tracking-widest opacity-60">
                  ⌘B
                </span>
              </a>
            </li>
            <li>
              <a class="uk-drop-close justify-between" href="#demo" uk-toggle>
                Settings
                <span class="ml-auto text-xs tracking-widest opacity-60">
                  ⌘S
                </span>
              </a>
            </li>
            <li>
              <a class="uk-drop-close justify-between" href="#demo" uk-toggle>
                New Team
              </a>
            </li>
            <li class="uk-nav-divider"></li>
            <li>
              <a class="uk-drop-close justify-between" href="#demo" uk-toggle>
                Logout
              </a>
            </li>
          </ul>
        </div>
      </div>
    </div>

    <div class="mt-8 flex items-center justify-between">
      <div class="flex flex-1 gap-4">
        <div class="w-[250px]">
          <input class="uk-input" type="text" placeholder="Filter task" />
        </div>
        <button
          class="inline-flex items-center justify-center rounded-md border border-dashed border-input px-3 text-xs font-medium shadow-sm hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring"
        >
          <span class="mr-2 size-4">
            <uk-icon icon="circle-plus"></uk-icon>
          </span>
          Status
        </button>
        <div
          class="uk-drop uk-dropdown"
          uk-drop="mode: click; pos: bottom-left"
        >
          <div class="m-1 flex items-center px-2 py-1.5">
            <uk-icon class="opacity-50" icon="search"></uk-icon>
            <input
              class="block w-full bg-transparent pl-2 text-sm focus:outline-none"
              placeholder="Status"
              type="text"
            />
          </div>
          <ul class="uk-dropdown-nav">
            <li class="uk-nav-divider"></li>
            {
              [
                { status: "backlog", count: 21 },
                { status: "todo", count: 21 },
                { status: "progress", count: 20 },
                { status: "done", count: 19 },
                { status: "cancelled", count: 19 },
              ].map((a) => (
                <li>
                  <a class="uk-drop-close" href="#demo" uk-toggle>
                    <div class="flex flex-1 items-center justify-between">
                      <TaskStatus status={a.status} />
                      <span class="font-geist-mono text-xs">{a.count}</span>
                    </div>
                  </a>
                </li>
              ))
            }
          </ul>
        </div>

        <button
          class="inline-flex items-center justify-center rounded-md border border-dashed border-input px-3 text-xs font-medium shadow-sm hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring"
        >
          <span class="mr-2 size-4">
            <uk-icon icon="circle-plus"></uk-icon>
          </span>
          Priority
        </button>
        <div
          class="uk-drop uk-dropdown"
          uk-drop="mode: click; pos: bottom-left"
        >
          <ul class="uk-dropdown-nav">
            {
              [
                { priority: "low", count: 36 },
                { priority: "medium", count: 33 },
                { priority: "high", count: 31 },
              ].map((a) => (
                <li>
                  <a class="uk-drop-close" href="#demo" uk-toggle>
                    <div class="flex flex-1 items-center justify-between">
                      <TaskPriority priority={a.priority} />
                      <span class="font-geist-mono text-xs">{a.count}</span>
                    </div>
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </div>

      <div class="">
        <button class="uk-button uk-button-default">
          <span class="mr-2 size-4">
            <uk-icon icon="settings-2"></uk-icon>
          </span>
          View
        </button>
        <div
          class="uk-drop uk-dropdown"
          uk-drop="mode: click; pos: bottom-right"
        >
          <ul class="uk-dropdown-nav">
            <li class="uk-nav-header">Toggle columns</li>
            <li class="uk-nav-divider"></li>
            {
              ["Title", "Status", "Priority"].map((a) => (
                <li>
                  <a class="uk-drop-close" href="#demo" uk-toggle>
                    <uk-icon class="mr-2" icon="check" />
                    {a}
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </div>

    <div class="uk-overflow-auto mt-4 rounded-md border border-border">
      <table
        class="uk-table uk-table-middle uk-table-divider uk-table-hover uk-table-small"
      >
        <thead>
          <tr>
            <th class="uk-table-shrink p-2">
              <input
                type="checkbox"
                class="uk-checkbox"
                onclick="return false"
              />
            </th>
            <th class="p-2">Task</th>
            <th class="uk-table-expand p-2">Title</th>
            <th class="p-2">Status</th>
            <th class="p-2">Priority</th>
            <th class="uk-table-shrink p-2"></th>
          </tr>
        </thead>
        <tbody>
          {
            data.splice(0, 10).map((a) => (
              <tr class={a.selected === true ? "uk-active" : ""}>
                <td class="uk-table-shrink p-2">
                  <input
                    class="uk-checkbox"
                    type="checkbox"
                    onclick="return false"
                    checked={a.selected === true}
                  />
                </td>
                <td class="p-2">{a.id}</td>
                <td class="uk-table-expand max-w-[500px] truncate p-2">
                  <span class="uk-label capitalize">{a.label}</span>
                  <span class="font-medium">{a.title}</span>
                </td>
                <td class="uk-text-nowrap p-2">
                  <TaskStatus status={a.status} />
                </td>
                <td class="uk-text-nowrap p-2">
                  <TaskPriority priority={a.priority} />
                </td>
                <td class="p-2">
                  <button class="uk-icon-button uk-icon-button-xsmall">
                    <span class="size-4">
                      <uk-icon icon="ellipsis" />
                    </span>
                  </button>
                  <div
                    class="uk-drop uk-dropdown"
                    uk-dropdown="mode: click; pos: bottom-right"
                  >
                    <ul class="uk-dropdown-nav uk-nav">
                      <li>
                        <a
                          class="uk-drop-close justify-between"
                          href="#demo"
                          uk-toggle
                        >
                          Edit
                        </a>
                      </li>
                      <li>
                        <a
                          class="uk-drop-close justify-between"
                          href="#demo"
                          uk-toggle
                        >
                          Make a copy
                        </a>
                      </li>
                      <li>
                        <a
                          class="uk-drop-close justify-between"
                          href="#demo"
                          uk-toggle
                        >
                          Favorite
                        </a>
                      </li>
                      <li class="uk-nav-divider" />
                      <li>
                        <a
                          class="uk-drop-close justify-between"
                          href="#demo"
                          uk-toggle
                        >
                          Delete
                          <span class="ml-auto text-xs tracking-widest opacity-60">
                            ⌘⌫
                          </span>
                        </a>
                      </li>
                    </ul>
                  </div>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>
    </div>

    <div class="mt-4 flex items-center justify-between px-2">
      <div class="flex-1 text-sm text-muted-foreground">
        1 of 100 row(s) selected.
      </div>
      <div class="flex flex-none items-center space-x-8">
        <div class="flex items-center space-x-2">
          <p class="text-sm font-medium">Rows per page</p>
          <button class="uk-button uk-button-default">
            <div class="flex flex-1 items-center justify-between gap-x-2">
              <span>10</span>
              <span class="size-4 opacity-50">
                <uk-icon icon="chevrons-up-down"></uk-icon>
              </span>
            </div>
          </button>

          <div
            class="uk-drop uk-dropdown min-w-32"
            uk-drop="mode: click; pos: top-left"
          >
            <ul class="uk-dropdown-nav">
              {
                [10, 20, 30, 40, 50].map((a) => (
                  <li>
                    <a
                      class="uk-drop-close justify-between"
                      href="#demo"
                      uk-toggle
                    >
                      {a}
                      {a === 10 ? <uk-icon icon="check" /> : ""}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
        </div>

        <div
          class="flex w-[100px] items-center justify-center text-sm font-medium"
        >
          Page 1 of 10
        </div>

        <div class="flex items-center space-x-2">
          <button
            class="uk-icon-button uk-icon-button-small hidden lg:inline-flex"
            disabled
          >
            <span class="sr-only">Go to first page</span>
            <span class="size-4">
              <uk-icon icon="chevrons-left"></uk-icon>
            </span>
          </button>
        </div>
        <button class="uk-icon-button uk-icon-button-small" disabled>
          <span class="sr-only">Go to previous page</span>
          <span class="size-4">
            <uk-icon icon="chevron-left"></uk-icon>
          </span>
        </button>
        <button class="uk-icon-button uk-icon-button-small" uk-toggle="#demo">
          <span class="sr-only">Go to next page</span>
          <span class="size-4">
            <uk-icon icon="chevron-right"></uk-icon>
          </span>
        </button>
        <button
          class="uk-icon-button uk-icon-button-small hidden lg:inline-flex"
          uk-toggle="#demo"
        >
          <span class="sr-only">Go to last page</span>
          <span class="size-4">
            <uk-icon icon="chevrons-right"></uk-icon>
          </span>
        </button>
      </div>
    </div>
  </div>
</Master>
